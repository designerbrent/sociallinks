<?php
// $Id: sociallinks.module,v 1.1 2010/02/10 23:43:47 greenskin Exp $

/**
 * @file
 * This module provides a block and a settings page to display a collection
 * of social media links like Facebook, Twitter, Simplenews subscription, etc.
 */

define('SOCIALLINKS_VERTICAL', 1);
define('SOCIALLINKS_HORIZONTAL', 2);
define('SOCIALLINKS_HOVER', 1);
define('SOCIALLINKS_CLICK', 2);

/*******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/

/**
 * Implementation of hook_perm().
 */
function sociallinks_perm() {
  return array('access social links');
}

/**
 * Implementation of hook_block().
 */
function sociallinks_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0] = array(
        'info' => t('Social links'),
        'cache' => BLOCK_NO_CACHE,
        'weight' => -10
      );
      return $blocks;
    case 'configure':
      if ($delta == 0) {
        $form['sociallinks_style'] = array(
          '#type' => 'select',
          '#title' => t('Tabs style'),
          '#description' => t('Determine if the Social Links tabs should be displayed horizontally or vertically.'),
          '#default_value' => variable_get('sociallinks_style', SOCIALLINKS_VERTICAL),
          '#options' => array(SOCIALLINKS_VERTICAL => t('Vertical'), SOCIALLINKS_HORIZONTAL => t('Horizontal')),
          '#required' => TRUE
        );
        $form['sociallinks_tab_event'] = array(
          '#type' => 'select',
          '#title' => t('Tab event'),
          '#description' => t('When switching to a new tab, should a "Click" or "Hover" action be used.'),
          '#default_value' => variable_get('sociallinks_tab_event', SOCIALLINKS_HOVER),
          '#options' => array(SOCIALLINKS_HOVER => t('Hover'), SOCIALLINKS_CLICK => t('Click')),
          '#required' => TRUE
        );
        sociallinks_include_files();
        $tabs = sociallinks_fetch_tabs(FALSE, TRUE);
        $form['sociallinks_tabs'] = array('#tree' => TRUE);
        foreach ($tabs as $id => $tab) {
          $form['sociallinks_tabs'][$id] = array(
            '#type' => 'fieldset',
            '#title' => $tab['title'] .' tab settings',
            '#collapsible' => TRUE,
            '#collapsed' => TRUE
          );
          $form['sociallinks_tabs'][$id]['enabled'] = array(
            '#type' => 'checkbox',
            '#title' => t('Enabled'),
            '#default_value' => $tab['settings']['enabled']
          );
          $form['sociallinks_tabs'][$id]['title'] = array(
            '#type' => 'textfield',
            '#title' => t('Tab Title'),
            '#description' => t('Override the default title for the tab. Leave blank to use the default tab title.'),
            '#default_value' => $tab['settings']['title']
          );
          $form['sociallinks_tabs'][$id]['message'] = array(
            '#type' => 'textarea',
            '#title' => t('Message'),
            '#description' => t('Enter a message to be displayed in the content of the tab.'),
            '#default_value' => $tab['settings']['message'],
            '#rows' => 10
          );
          $form['sociallinks_tabs'][$id]['weight'] = array(
            '#type' => 'weight',
            '#title' => t('Weight'),
            '#delta' => 10,
            '#default_value' => $tab['settings']['weight'],
            '#weight' => 10
          );
          if (isset($tab['configure callback'])) {
            $function = $tab['configure callback'];
            $form['sociallinks_tabs'][$id] += $function();
          }
        }
        return $form;
      }
    case 'save':
      if ($delta == 0) {
        $settings = array();
        sociallinks_include_files();
        $tabs = sociallinks_fetch_tabs(FALSE, TRUE);
        foreach ($edit['sociallinks_tabs'] as $id => $tab) {
          if (isset($tabs[$id]['save callback'])) {
            $function = $tabs[$id]['save callback'];
            $enabled = $function($edit['sociallinks_tabs'][$id]);
          }
          $settings[$id]['enabled'] = ($enabled !== FALSE) ? $tab['enabled'] : FALSE;
          $settings[$id]['title'] = $tab['title'];
          $settings[$id]['message'] = $tab['message'];
          $settings[$id]['weight'] = $tab['weight'];
        }
        variable_set('sociallinks_global_tab_settings', $settings);
        variable_set('sociallinks_style', $edit['sociallinks_style']);
        variable_set('sociallinks_tab_event', $edit['sociallinks_tab_event']);
        cache_clear_all('sociallinks:tabs', 'cache');
      }
      break;
    case 'view': default:
      switch ($delta) {
        case 0:
          if (user_access('access social links')) {
            $block['subject'] = t('Social links');
            $block['content'] = theme('sociallinks_block');
            return $block;
          }
      }
  }
}

/**
 * Implementation of hook_theme().
 */
function sociallinks_theme() {
  return array(
    'sociallinks_block' => array(
      'arguments' => array('tabs' => '', 'content' => ''),
      'template' => 'sociallinks-block',
    ),
    'sociallinks_tab' => array(
      'arguments' => array('tab' => NULL)
    ),
    'sociallinks_content' => array(
      'arguments' => array('tab' => NULL, 'output' => NULL)
    )
  );
}

/*******************************************************************************
 * Hook Functions (Social Links)
 ******************************************************************************/

function sociallinks_sociallinks_tabs() {
  return array(
    'facebook' => array(
      'title' => 'Facebook',
      'file' => 'sociallinks.tabs.inc',
      'configure callback' => 'sociallinks_facebook_configure'
    ),
    'twitter' => array(
      'title' => 'Twitter',
      'file' => 'sociallinks.tabs.inc',
      'configure callback' => 'sociallinks_twitter_configure'
    ),
    'rss' => array(
      'title' => 'RSS',
      'file' => 'sociallinks.tabs.inc',
      'configure callback' => 'sociallinks_rss_configure'
    )
  );
}

function sociallinks_sociallinks_tabs_alter(&$tabs) {
  $tabs['facebook']['settings']['url'] = variable_get('sociallinks_facebook_url', '');
  $tabs['facebook']['settings']['url_title'] = variable_get('sociallinks_facebook_url_title', 'Visit our Facebook Page');
  $tabs['rss']['settings']['url'] = variable_get('sociallinks_rss_url', '');
  $tabs['rss']['settings']['url_title'] = variable_get('sociallinks_rss_title', '');
  $tabs['simplenews']['settings']['newsletters'] = variable_get('sociallinks_simplenews_newsletters', array());
  $tabs['twitter']['settings']['username'] = variable_get('sociallinks_twitter_username', '');
}

/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/



/*******************************************************************************
 * Module and Helper Functions
 ******************************************************************************/

function sociallinks_fetch_tabs($enabled = FALSE, $rebuild = FALSE) {
  static $tabs = array();

  if ($rebuild) {
    $tabs = array();
  }

  if (empty($tabs)) {
    if (!$rebuild) {
      $cache = cache_get('sociallinks:tabs');
      if (!empty($cache->data)) {
        $tabs = $cache->data;
      }
    }

    if (empty($tabs)) {
      foreach (module_implements('sociallinks_tabs') as $module) {
        $function = $module .'_sociallinks_tabs';
        $module_tabs = $function();

        // Add defaults if needed.
        foreach ($module_tabs as $id => $tab) {
          $module_tabs[$id]['module'] = $module;
          $module_tabs[$id]['id'] = $id;
          if (!isset($tab['settings']['enabled'])) {
            $module_tabs[$id]['settings']['enabled'] = FALSE;
          }
          if (!isset($tab['settings']['title'])) {
            $module_tabs[$id]['settings']['title'] = '';
          }
          if (!isset($tab['settings']['message'])) {
            $module_tabs[$id]['settings']['message'] = '';
          }
          if (!isset($tab['settings']['weight'])) {
            $module_tabs[$id]['settings']['weight'] = 0;
          }
          if (isset($tab['file']) && !isset($tab['file path'])) {
            $module_tabs[$id]['file path'] = drupal_get_path('module', $module);
          }
          if (isset($tab['configure callback'])) {
            if (!isset($tab['save callback'])) {
              $module_tabs[$id]['save callback'] = $module .'_'. $id .'_save';
            }
            if (!isset($tab['content callback'])) {
              $module_tabs[$id]['content callback'] = $module .'_'. $id .'_content';
            }
          }
        }

        $tabs += $module_tabs;
      }

      drupal_alter('sociallinks_tabs', $tabs);

      // Apply settings
      $settings = variable_get('sociallinks_global_tab_settings', array());
      foreach ($settings as $id => $tab) {
        $tabs[$id]['settings'] = array_merge($tabs[$id]['settings'], $tab);
      }

      uasort($tabs, "sociallinks_tab_sort");

      $count = 1;
      foreach ($tabs as $key => $tab) {
        $tabs[$key]['number'] = $count++;
      }

      cache_set('sociallinks:tabs', $tabs);
    }
  }

  if ($enabled) {
    $enabled_tabs = array();
    foreach ($tabs as $tab) {
      if ($tab['settings']['enabled'] && module_exists($tab['module'])) {
        $enabled_tabs[] = $tab;
      }
    }
    return $enabled_tabs;
  }

  return $tabs;
}

function sociallinks_include_files($include_tabs = array()) {
  $tabs = sociallinks_fetch_tabs();

  if (empty($include_tabs)) {
    $include_tabs = array_keys($tabs);
  }

  foreach ($include_tabs as $id) {
    if (!isset($included[$id]) && isset($tabs[$id]['file'])) {
      sociallinks_include($tabs[$id]['file'], $tabs[$id]['file path']);
    }
  }
}

function sociallinks_include($file, $path) {
  static $included = array();

  if (!isset($included[$path .'/'. $file])) {
    if (isset($file) && file_exists('./'. $path .'/'. $file)) {
      require_once './' . $path .'/'. $file;
    }
    $included[$file] = TRUE;
  }
}

function sociallinks_get_output() {
  $tabs = $content = array();
  foreach (sociallinks_fetch_tabs(TRUE) as $tab) {
    $output = $tab['settings']['message'];
    if (isset($tab['content callback'])) {
      if (isset($tab['file'])) {
        sociallinks_include($tab['file'], $tab['file path']);
      }
      $function = $tab['content callback'];
      if (function_exists($function)) {
        $output .= '<div class="link icon">'. $function() .'</div>';
      }
    }
    $tabs[] = array(
      '#value' => theme('sociallinks_tab', $tab),
      '#weight' => $tab['settings']['weight']
    );
    $content[] = array(
      '#value' => theme('sociallinks_content', $tab, $output),
      '#weight' => $tab['settings']['weight']
    );
  }
  return array($tabs, $content);
}

function sociallinks_tab_sort($a, $b) {
  $a_weight = $a['settings']['weight'];
  $b_weight = $b['settings']['weight'];
  if ($a_weight == $b_weight) {
    $a_title = (!empty($a['settings']['title'])) ? $a['settings']['title'] : $a['title'];
    $b_title = (!empty($b['settings']['title'])) ? $b['settings']['title'] : $b['title'];
    if ($a_title == $b_title) {
      return 0;
    }
    return strcmp($a_title, $b_title);
  }
  return ($a_weight < $b_weight) ? -1 : 1;
}

/**
 * Load a user or creates a dummy anonymous user.
 *
 * @return account
 *   object (
 *     mail,   email address
 *     uid,    uid or 0 for anonymous
 *   )
 */
function _sociallinks_user_load($mail) {
  $account = user_load(array('mail' => $mail));
  if ($account === FALSE) {
    // Construct anonymous user since we don't have a user that matches that e-amil.
    $account = new stdClass();
    $account->uid = 0;
    $account->mail = drupal_strtolower($mail);
  }
  return $account;
}

/*******************************************************************************
 * Theme Functions
 ******************************************************************************/

function template_preprocess_sociallinks_block(&$vars) {
  jquery_ui_add('ui.tabs');
  drupal_add_js(drupal_get_path('module', 'sociallinks') .'/sociallinks.js');
  drupal_add_css(drupal_get_path('module', 'sociallinks') .'/css/sociallinks.css');

  $style = (variable_get('sociallinks_style', SOCIALLINKS_VERTICAL) == SOCIALLINKS_VERTICAL) ? 'vertical' : 'horizontal';
  drupal_add_css(drupal_get_path('module', 'sociallinks') .'/css/'. $style .'.css');

  drupal_add_js(array('sociallinks' => array('tabEvent' => (int)variable_get('sociallinks_tab_event', SOCIALLINKS_HOVER))), 'setting');

  $vars['tab_event'] = (variable_get('sociallinks_tab_event',SOCIALLINKS_HOVER) == SOCIALLINKS_HOVER) ? 'tab_hover' : 'tab_click';
  list($vars['tabs'], $vars['content']) = sociallinks_get_output();
}

function theme_sociallinks_tab($tab) {
  $title = (!empty($tab['settings']['title'])) ? $tab['settings']['title'] : $tab['title'];

  if (variable_get('sociallinks_tab_event', SOCIALLINKS_HOVER) == SOCIALLINKS_HOVER && !in_array($tab['id'], array('simplenews', 'mailchimp'))) {
    switch ($tab['id']) {
      case 'twitter':
        $url_title = check_plain($tab['settings']['username']);
        $url = url('http://twitter.com/'. $tab['settings']['username']);
        break;
      case 'facebook':
      case 'rss':
        $url_title = check_plain($tab['settings']['url_title']);
        $url = url($tab['settings']['url']);
        break;
    }
    $output = '<li id="tab-'. $tab['number'] .'" class="' . $tab['id'] . ' tab'. ($tab['number'] == 1 ? ' active' : '') .'"><a href="' . $url . '" class="button"><span>'. $url_title .'</span></a></li>';
  } else {
    $output = '<li id="tab-'. $tab['number'] .'" class="' . $tab['id'] . ' tab'. ($tab['number'] == 1 ? ' active' : '') .'"><a href="#sociallinks-tab-'. str_replace('_', '-', $tab['id']) .'" class="button"><span>'. $title .'</span></a></li>';
  }

  return $output;
}

function theme_sociallinks_content($tab, $output) {
  return '<div id="sociallinks-content-'. str_replace('_', '-', $tab['id']) .'" class="sociallinks-content tab-content tab-'. $tab['number'] . ($tab['number'] != 1 ? ' hide' : '') .'">'. $output .'</div>';
}
